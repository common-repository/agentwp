{"version":3,"file":"WriteToEditor-63b22c42.js","sources":["../../node_modules/partial-json/dist/options.js","../../node_modules/partial-json/dist/index.js","../../client/Services/WriteToEditor.ts"],"sourcesContent":["\"use strict\";\n/**\n * Sometimes you don't allow every type to be partially parsed.\n * For example, you may not want a partial number because it may increase its size gradually before it's complete.\n * In this case, you can use the `Allow` object to control what types you allow to be partially parsed.\n * @module\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Allow = exports.ALL = exports.COLLECTION = exports.ATOM = exports.SPECIAL = exports.INF = exports._INFINITY = exports.INFINITY = exports.NAN = exports.BOOL = exports.NULL = exports.OBJ = exports.ARR = exports.NUM = exports.STR = void 0;\n/**\n * allow partial strings like `\"hello \\u12` to be parsed as `\"hello \"`\n */\nexports.STR = 0b000000001;\n/**\n * allow partial numbers like `123.` to be parsed as `123`\n */\nexports.NUM = 0b000000010;\n/**\n * allow partial arrays like `[1, 2,` to be parsed as `[1, 2]`\n */\nexports.ARR = 0b000000100;\n/**\n * allow partial objects like `{\"a\": 1, \"b\":` to be parsed as `{\"a\": 1}`\n */\nexports.OBJ = 0b000001000;\n/**\n * allow `nu` to be parsed as `null`\n */\nexports.NULL = 0b000010000;\n/**\n * allow `tr` to be parsed as `true`, and `fa` to be parsed as `false`\n */\nexports.BOOL = 0b000100000;\n/**\n * allow `Na` to be parsed as `NaN`\n */\nexports.NAN = 0b001000000;\n/**\n * allow `Inf` to be parsed as `Infinity`\n */\nexports.INFINITY = 0b010000000;\n/**\n * allow `-Inf` to be parsed as `-Infinity`\n */\nexports._INFINITY = 0b100000000;\nexports.INF = exports.INFINITY | exports._INFINITY;\nexports.SPECIAL = exports.NULL | exports.BOOL | exports.INF | exports.NAN;\nexports.ATOM = exports.STR | exports.NUM | exports.SPECIAL;\nexports.COLLECTION = exports.ARR | exports.OBJ;\nexports.ALL = exports.ATOM | exports.COLLECTION;\n/**\n * Control what types you allow to be partially parsed.\n * The default is to allow all types to be partially parsed, which in most casees is the best option.\n * @example\n * If you don't want to allow partial objects, you can use the following code:\n * ```ts\n * import { Allow, parse } from \"partial-json\";\n * parse(`[{\"a\": 1, \"b\": 2}, {\"a\": 3,`, Allow.ARR); // [ { a: 1, b: 2 } ]\n * ```\n * Or you can use `~` to disallow a type:\n * ```ts\n * parse(`[{\"a\": 1, \"b\": 2}, {\"a\": 3,`, ~Allow.OBJ); // [ { a: 1, b: 2 } ]\n * ```\n * @example\n * If you don't want to allow partial strings, you can use the following code:\n * ```ts\n * import { Allow, parse } from \"partial-json\";\n * parse(`[\"complete string\", \"incompl`, ~Allow.STR); // [ 'complete string' ]\n * ```\n */\nexports.Allow = { STR: exports.STR, NUM: exports.NUM, ARR: exports.ARR, OBJ: exports.OBJ, NULL: exports.NULL, BOOL: exports.BOOL, NAN: exports.NAN, INFINITY: exports.INFINITY, _INFINITY: exports._INFINITY, INF: exports.INF, SPECIAL: exports.SPECIAL, ATOM: exports.ATOM, COLLECTION: exports.COLLECTION, ALL: exports.ALL };\nexports.default = exports.Allow;\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Allow = exports.MalformedJSON = exports.PartialJSON = exports.parseJSON = exports.parse = void 0;\nconst options_1 = require(\"./options\");\nObject.defineProperty(exports, \"Allow\", { enumerable: true, get: function () { return options_1.Allow; } });\n__exportStar(require(\"./options\"), exports);\nclass PartialJSON extends Error {\n}\nexports.PartialJSON = PartialJSON;\nclass MalformedJSON extends Error {\n}\nexports.MalformedJSON = MalformedJSON;\n/**\n * Parse incomplete JSON\n * @param {string} jsonString Partial JSON to be parsed\n * @param {number} allowPartial Specify what types are allowed to be partial, see {@link Allow} for details\n * @returns The parsed JSON\n * @throws {PartialJSON} If the JSON is incomplete (related to the `allow` parameter)\n * @throws {MalformedJSON} If the JSON is malformed\n */\nfunction parseJSON(jsonString, allowPartial = options_1.Allow.ALL) {\n    if (typeof jsonString !== \"string\") {\n        throw new TypeError(`expecting str, got ${typeof jsonString}`);\n    }\n    if (!jsonString.trim()) {\n        throw new Error(`${jsonString} is empty`);\n    }\n    return _parseJSON(jsonString.trim(), allowPartial);\n}\nexports.parseJSON = parseJSON;\n;\nconst _parseJSON = (jsonString, allow) => {\n    const length = jsonString.length;\n    let index = 0;\n    const markPartialJSON = (msg) => {\n        throw new PartialJSON(`${msg} at position ${index}`);\n    };\n    const throwMalformedError = (msg) => {\n        throw new MalformedJSON(`${msg} at position ${index}`);\n    };\n    const parseAny = () => {\n        skipBlank();\n        if (index >= length)\n            markPartialJSON(\"Unexpected end of input\");\n        if (jsonString[index] === '\"')\n            return parseStr();\n        if (jsonString[index] === \"{\")\n            return parseObj();\n        if (jsonString[index] === \"[\")\n            return parseArr();\n        if (jsonString.substring(index, index + 4) === \"null\" || (options_1.Allow.NULL & allow && length - index < 4 && \"null\".startsWith(jsonString.substring(index)))) {\n            index += 4;\n            return null;\n        }\n        if (jsonString.substring(index, index + 4) === \"true\" || (options_1.Allow.BOOL & allow && length - index < 4 && \"true\".startsWith(jsonString.substring(index)))) {\n            index += 4;\n            return true;\n        }\n        if (jsonString.substring(index, index + 5) === \"false\" || (options_1.Allow.BOOL & allow && length - index < 5 && \"false\".startsWith(jsonString.substring(index)))) {\n            index += 5;\n            return false;\n        }\n        if (jsonString.substring(index, index + 8) === \"Infinity\" || (options_1.Allow.INFINITY & allow && length - index < 8 && \"Infinity\".startsWith(jsonString.substring(index)))) {\n            index += 8;\n            return Infinity;\n        }\n        if (jsonString.substring(index, index + 9) === \"-Infinity\" || (options_1.Allow._INFINITY & allow && 1 < length - index && length - index < 9 && \"-Infinity\".startsWith(jsonString.substring(index)))) {\n            index += 9;\n            return -Infinity;\n        }\n        if (jsonString.substring(index, index + 3) === \"NaN\" || (options_1.Allow.NAN & allow && length - index < 3 && \"NaN\".startsWith(jsonString.substring(index)))) {\n            index += 3;\n            return NaN;\n        }\n        return parseNum();\n    };\n    const parseStr = () => {\n        const start = index;\n        let escape = false;\n        index++; // skip initial quote\n        while (index < length && (jsonString[index] !== '\"' || (escape && jsonString[index - 1] === \"\\\\\"))) {\n            escape = jsonString[index] === \"\\\\\" ? !escape : false;\n            index++;\n        }\n        if (jsonString.charAt(index) == '\"') {\n            try {\n                return JSON.parse(jsonString.substring(start, ++index - Number(escape)));\n            }\n            catch (e) {\n                throwMalformedError(String(e));\n            }\n        }\n        else if (options_1.Allow.STR & allow) {\n            try {\n                return JSON.parse(jsonString.substring(start, index - Number(escape)) + '\"');\n            }\n            catch (e) {\n                // SyntaxError: Invalid escape sequence\n                return JSON.parse(jsonString.substring(start, jsonString.lastIndexOf(\"\\\\\")) + '\"');\n            }\n        }\n        markPartialJSON(\"Unterminated string literal\");\n    };\n    const parseObj = () => {\n        index++; // skip initial brace\n        skipBlank();\n        const obj = {};\n        try {\n            while (jsonString[index] !== \"}\") {\n                skipBlank();\n                if (index >= length && options_1.Allow.OBJ & allow)\n                    return obj;\n                const key = parseStr();\n                skipBlank();\n                index++; // skip colon\n                try {\n                    const value = parseAny();\n                    obj[key] = value;\n                }\n                catch (e) {\n                    if (options_1.Allow.OBJ & allow)\n                        return obj;\n                    else\n                        throw e;\n                }\n                skipBlank();\n                if (jsonString[index] === \",\")\n                    index++; // skip comma\n            }\n        }\n        catch (e) {\n            if (options_1.Allow.OBJ & allow)\n                return obj;\n            else\n                markPartialJSON(\"Expected '}' at end of object\");\n        }\n        index++; // skip final brace\n        return obj;\n    };\n    const parseArr = () => {\n        index++; // skip initial bracket\n        const arr = [];\n        try {\n            while (jsonString[index] !== \"]\") {\n                arr.push(parseAny());\n                skipBlank();\n                if (jsonString[index] === \",\") {\n                    index++; // skip comma\n                }\n            }\n        }\n        catch (e) {\n            if (options_1.Allow.ARR & allow) {\n                return arr;\n            }\n            markPartialJSON(\"Expected ']' at end of array\");\n        }\n        index++; // skip final bracket\n        return arr;\n    };\n    const parseNum = () => {\n        if (index === 0) {\n            if (jsonString === \"-\")\n                throwMalformedError(\"Not sure what '-' is\");\n            try {\n                return JSON.parse(jsonString);\n            }\n            catch (e) {\n                if (options_1.Allow.NUM & allow)\n                    try {\n                        return JSON.parse(jsonString.substring(0, jsonString.lastIndexOf(\"e\")));\n                    }\n                    catch (e) { }\n                throwMalformedError(String(e));\n            }\n        }\n        const start = index;\n        if (jsonString[index] === \"-\")\n            index++;\n        while (jsonString[index] && \",]}\".indexOf(jsonString[index]) === -1)\n            index++;\n        if (index == length && !(options_1.Allow.NUM & allow))\n            markPartialJSON(\"Unterminated number literal\");\n        try {\n            return JSON.parse(jsonString.substring(start, index));\n        }\n        catch (e) {\n            if (jsonString.substring(start, index) === \"-\")\n                markPartialJSON(\"Not sure what '-' is\");\n            try {\n                return JSON.parse(jsonString.substring(start, jsonString.lastIndexOf(\"e\")));\n            }\n            catch (e) {\n                throwMalformedError(String(e));\n            }\n        }\n    };\n    const skipBlank = () => {\n        while (index < length && \" \\n\\r\\t\".includes(jsonString[index])) {\n            index++;\n        }\n    };\n    return parseAny();\n};\nconst parse = parseJSON;\nexports.parse = parse;\n","declare const wp: any;\nimport { parse } from 'partial-json';\n\nimport { type BlockType, GutenbergStreamType } from '@/Types/types';\n\nexport function WriteToEditor( content: string, previousContent: BlockType[] ) {\n  try {\n    if ( content ) {\n      const updatedBlocks = parse( content ) as GutenbergStreamType;\n      if ( ! updatedBlocks.content ) {\n        console.info( 'No content to write...' );\n        return;\n      }\n      const blocksCount = updatedBlocks.content.length;\n      const key = blocksCount - 1;\n      const block = updatedBlocks.content[ key ] || {};\n\n      block.status = previousContent[ key ]?.status || 'initial';\n      block.clientId = previousContent[ key ]?.clientId || '';\n      block.valid = previousContent[ key ]?.valid || undefined;\n\n      // validate name, if the name is not valid, skip\n      if ( ! block.name || ! wp.blocks.getBlockType( block.name ) ) {\n        console.info( 'Skipping... the block name is not valid...', block.name );\n        return;\n      }\n      updatedBlocks.content[ key ].valid = true;\n\n      // Insert the block and the status ready\n      if ( ! block.clientId ) {\n        insertBlock( block ).then( clientId => {\n          updatedBlocks.content[ key ].clientId = clientId;\n          updatedBlocks.content[ key ].status = 'ready';\n        } );\n      } else if (\n        block.attributes?.content &&\n        block.attributes?.content !== previousContent[ key ]?.attributes?.content\n      ) {\n        updatedBlocks.content[ key ].status = 'updating_content';\n        if ( ! block.clientId ) {\n          insertBlock( block ).then( clientId => {\n            updatedBlocks.content[ key ].clientId = clientId;\n          } );\n        } else {\n          updateBlockContent( block ).then( clientId => {\n            if ( clientId ) {\n              updatedBlocks.content[ key ].clientId = clientId;\n            }\n          } );\n        }\n      } else if (\n        block.innerBlocks &&\n        block.innerBlocks?.length > 0 &&\n        JSON.stringify( block.innerBlocks ) !==\n          JSON.stringify( previousContent[ key ]?.innerBlocks )\n      ) {\n        updatedBlocks.content[ key ].status = 'updating_inner_blocks';\n        if ( ! block.clientId ) {\n          insertBlock( block ).then( clientId => {\n            updatedBlocks.content[ key ].clientId = clientId;\n          } );\n        } else {\n          updateBlockInnerBlocks( block ).then( clientId => {\n            if ( clientId ) {\n              updatedBlocks.content[ key ].clientId = clientId;\n            }\n          } );\n        }\n      }\n      return updatedBlocks;\n    }\n  } catch ( error ) {\n    console.info( 'Error writing to editor', error );\n  }\n}\n\nexport async function CleanGutenbergContent() {\n  try {\n    const blocks = wp.data.select( 'core/block-editor' ).getBlocks();\n    if ( blocks && blocks.length > 0 ) {\n      await wp.data\n        .dispatch( 'core/block-editor' )\n        .removeBlocks( blocks.map( block => block.clientId ) );\n    }\n  } catch ( error ) {\n    console.info( 'Error cleaning content', error );\n  }\n}\n\nasync function insertBlock( block: BlockType ) {\n  if ( block.clientId ) {\n    return;\n  }\n\n  const { dispatch } = wp.data;\n  const { name, attributes } = block;\n\n  // Create block with content\n  const newBlock = wp.blocks.createBlock( name, attributes );\n\n  // Insert block into editor\n  await dispatch( 'core/block-editor' ).insertBlocks( newBlock );\n\n  return newBlock.clientId;\n}\n\nasync function updateBlockContent( block: BlockType ) {\n  if ( ! block.clientId ) {\n    return;\n  }\n  const { dispatch } = wp.data;\n  await dispatch( 'core/block-editor' ).updateBlockAttributes( block.clientId, block.attributes );\n  return block.clientId;\n}\n\nasync function updateBlockInnerBlocks( block: BlockType ) {\n  if ( ! block.clientId ) {\n    return '';\n  }\n  const { dispatch } = wp.data;\n  try {\n    // Create inner blocks\n    const theInnerBlocks = wp.blocks.createBlocksFromInnerBlocksTemplate( block.innerBlocks );\n    if ( theInnerBlocks ) {\n      // Create new block with inner blocks\n      const newBlock = wp.blocks.createBlock( block.name, block.attributes || {}, theInnerBlocks );\n      // Replace the block with the new block\n      await dispatch( 'core/block-editor' ).replaceBlocks( block.clientId, newBlock );\n      // Return the new block clientId\n      return newBlock.clientId;\n    }\n  } catch ( error: any ) {\n    console.error( 'Skipping... the block is incomplete...', error.message );\n  }\n}\n"],"names":["exports","__createBinding","this","o","m","k","k2","desc","__exportStar","p","options_1","require$$0","PartialJSON","MalformedJSON","parseJSON","jsonString","allowPartial","_parseJSON","allow","length","index","markPartialJSON","msg","throwMalformedError","parseAny","skipBlank","parseStr","parseObj","parseArr","parseNum","start","escape","e","obj","key","value","arr","parse","WriteToEditor","content","previousContent","updatedBlocks","block","_a","_b","_c","_d","_e","_g","_f","updateBlockContent","clientId","insertBlock","_h","_i","updateBlockInnerBlocks","error","CleanGutenbergContent","blocks","dispatch","name","attributes","newBlock","theInnerBlocks"],"mappings":"8EAOA,OAAO,eAAcA,EAAU,aAAc,CAAE,MAAO,EAAI,CAAE,EAC5DA,EAAA,MAAgBA,MAAcA,EAAqB,WAAAA,EAAA,KAAeA,EAAkB,QAAAA,EAAA,IAAcA,YAAoBA,EAAmB,SAAAA,EAAA,IAAcA,EAAe,KAAAA,EAAA,KAAeA,MAAcA,EAAc,IAAAA,EAAA,IAAcA,EAAc,IAAA,OAI7OA,EAAA,IAAc,EAIdA,EAAA,IAAc,EAIdA,EAAA,IAAc,EAIdA,EAAA,IAAc,EAIdA,EAAA,KAAe,GAIfA,EAAA,KAAe,GAIfA,EAAA,IAAc,GAIdA,EAAA,SAAmB,IAInBA,EAAA,UAAoB,IACpBA,EAAA,IAAcA,EAAQ,SAAWA,EAAQ,UACzCA,EAAA,QAAkBA,EAAQ,KAAOA,EAAQ,KAAOA,EAAQ,IAAMA,EAAQ,IACtEA,EAAe,KAAAA,EAAQ,IAAMA,EAAQ,IAAMA,EAAQ,QACnDA,EAAA,WAAqBA,EAAQ,IAAMA,EAAQ,IAC3CA,EAAA,IAAcA,EAAQ,KAAOA,EAAQ,WAqBrCA,EAAA,MAAgB,CAAE,IAAKA,EAAQ,IAAK,IAAKA,EAAQ,IAAK,IAAKA,EAAQ,IAAK,IAAKA,EAAQ,IAAK,KAAMA,EAAQ,KAAM,KAAMA,EAAQ,KAAM,IAAKA,EAAQ,IAAK,SAAUA,EAAQ,SAAU,UAAWA,EAAQ,UAAW,IAAKA,EAAQ,IAAK,QAASA,EAAQ,QAAS,KAAMA,EAAQ,KAAM,WAAYA,EAAQ,WAAY,IAAKA,EAAQ,KAC3TA,EAAkB,QAAAA,EAAQ,wBCtE1B,IAAIC,EAAmBC,GAAQA,EAAK,kBAAqB,OAAO,OAAU,SAASC,EAAGC,EAAGC,EAAGC,EAAI,CACxFA,IAAO,SAAWA,EAAKD,GAC3B,IAAIE,EAAO,OAAO,yBAAyBH,EAAGC,CAAC,GAC3C,CAACE,IAAS,QAASA,EAAO,CAACH,EAAE,WAAaG,EAAK,UAAYA,EAAK,iBAClEA,EAAO,CAAE,WAAY,GAAM,IAAK,UAAW,CAAE,OAAOH,EAAEC,CAAC,CAAE,IAE3D,OAAO,eAAeF,EAAGG,EAAIC,CAAI,CACpC,EAAK,SAASJ,EAAGC,EAAGC,EAAGC,EAAI,CACpBA,IAAO,SAAWA,EAAKD,GAC3BF,EAAEG,CAAE,EAAIF,EAAEC,CAAC,CACd,GACGG,EAAgBN,GAAQA,EAAK,cAAiB,SAASE,EAAGJ,EAAS,CACnE,QAASS,KAAKL,EAAOK,IAAM,WAAa,CAAC,OAAO,UAAU,eAAe,KAAKT,EAASS,CAAC,GAAGR,EAAgBD,EAASI,EAAGK,CAAC,CAC5H,EACA,OAAO,eAAcT,EAAU,aAAc,CAAE,MAAO,EAAI,CAAE,EAC5DA,EAAA,MAAgBA,gBAAwBA,EAAsB,YAAAA,EAAA,UAAoBA,EAAgB,MAAA,OAClG,MAAMU,EAAYC,EAClB,OAAO,eAAeX,EAAS,QAAS,CAAE,WAAY,GAAM,IAAK,UAAY,CAAE,OAAOU,EAAU,KAAM,CAAI,CAAA,EAC1GF,EAAaG,EAAsBX,CAAO,EAC1C,MAAMY,UAAoB,KAAM,CAC/B,CACDZ,EAAA,YAAsBY,EACtB,MAAMC,UAAsB,KAAM,CACjC,CACDb,EAAA,cAAwBa,EASxB,SAASC,EAAUC,EAAYC,EAAeN,EAAU,MAAM,IAAK,CAC/D,GAAI,OAAOK,GAAe,SACtB,MAAM,IAAI,UAAU,sBAAsB,OAAOA,CAAU,EAAE,EAEjE,GAAI,CAACA,EAAW,OACZ,MAAM,IAAI,MAAM,GAAGA,CAAU,WAAW,EAE5C,OAAOE,EAAWF,EAAW,KAAM,EAAEC,CAAY,CACpD,CACDhB,EAAA,UAAoBc,EAEpB,MAAMG,EAAa,CAACF,EAAYG,IAAU,CACtC,MAAMC,EAASJ,EAAW,OAC1B,IAAIK,EAAQ,EACZ,MAAMC,EAAmBC,GAAQ,CAC7B,MAAM,IAAIV,EAAY,GAAGU,CAAG,gBAAgBF,CAAK,EAAE,CAC3D,EACUG,EAAuBD,GAAQ,CACjC,MAAM,IAAIT,EAAc,GAAGS,CAAG,gBAAgBF,CAAK,EAAE,CAC7D,EACUI,EAAW,KACbC,IACIL,GAASD,GACTE,EAAgB,yBAAyB,EACzCN,EAAWK,CAAK,IAAM,IACfM,EAAQ,EACfX,EAAWK,CAAK,IAAM,IACfO,EAAQ,EACfZ,EAAWK,CAAK,IAAM,IACfQ,EAAQ,EACfb,EAAW,UAAUK,EAAOA,EAAQ,CAAC,IAAM,QAAWV,EAAU,MAAM,KAAOQ,GAASC,EAASC,EAAQ,GAAK,OAAO,WAAWL,EAAW,UAAUK,CAAK,CAAC,GACzJA,GAAS,EACF,MAEPL,EAAW,UAAUK,EAAOA,EAAQ,CAAC,IAAM,QAAWV,EAAU,MAAM,KAAOQ,GAASC,EAASC,EAAQ,GAAK,OAAO,WAAWL,EAAW,UAAUK,CAAK,CAAC,GACzJA,GAAS,EACF,IAEPL,EAAW,UAAUK,EAAOA,EAAQ,CAAC,IAAM,SAAYV,EAAU,MAAM,KAAOQ,GAASC,EAASC,EAAQ,GAAK,QAAQ,WAAWL,EAAW,UAAUK,CAAK,CAAC,GAC3JA,GAAS,EACF,IAEPL,EAAW,UAAUK,EAAOA,EAAQ,CAAC,IAAM,YAAeV,EAAU,MAAM,SAAWQ,GAASC,EAASC,EAAQ,GAAK,WAAW,WAAWL,EAAW,UAAUK,CAAK,CAAC,GACrKA,GAAS,EACF,KAEPL,EAAW,UAAUK,EAAOA,EAAQ,CAAC,IAAM,aAAgBV,EAAU,MAAM,UAAYQ,GAAS,EAAIC,EAASC,GAASD,EAASC,EAAQ,GAAK,YAAY,WAAWL,EAAW,UAAUK,CAAK,CAAC,GAC9LA,GAAS,EACF,MAEPL,EAAW,UAAUK,EAAOA,EAAQ,CAAC,IAAM,OAAUV,EAAU,MAAM,IAAMQ,GAASC,EAASC,EAAQ,GAAK,MAAM,WAAWL,EAAW,UAAUK,CAAK,CAAC,GACtJA,GAAS,EACF,KAEJS,EAAQ,GAEbH,EAAW,IAAM,CACnB,MAAMI,EAAQV,EACd,IAAIW,EAAS,GAEb,IADAX,IACOA,EAAQD,IAAWJ,EAAWK,CAAK,IAAM,KAAQW,GAAUhB,EAAWK,EAAQ,CAAC,IAAM,OACxFW,EAAShB,EAAWK,CAAK,IAAM,KAAO,CAACW,EAAS,GAChDX,IAEJ,GAAIL,EAAW,OAAOK,CAAK,GAAK,IAC5B,GAAI,CACA,OAAO,KAAK,MAAML,EAAW,UAAUe,EAAO,EAAEV,EAAQ,OAAOW,CAAM,CAAC,CAAC,CAC1E,OACMC,EAAG,CACNT,EAAoB,OAAOS,CAAC,CAAC,CAChC,SAEItB,EAAU,MAAM,IAAMQ,EAC3B,GAAI,CACA,OAAO,KAAK,MAAMH,EAAW,UAAUe,EAAOV,EAAQ,OAAOW,CAAM,CAAC,EAAI,GAAG,CAC9E,MACS,CAEN,OAAO,KAAK,MAAMhB,EAAW,UAAUe,EAAOf,EAAW,YAAY,IAAI,CAAC,EAAI,GAAG,CACpF,CAELM,EAAgB,6BAA6B,CACrD,EACUM,EAAW,IAAM,CACnBP,IACAK,IACA,MAAMQ,EAAM,CAAA,EACZ,GAAI,CACA,KAAOlB,EAAWK,CAAK,IAAM,KAAK,CAE9B,GADAK,IACIL,GAASD,GAAUT,EAAU,MAAM,IAAMQ,EACzC,OAAOe,EACX,MAAMC,EAAMR,IACZD,IACAL,IACA,GAAI,CACA,MAAMe,EAAQX,IACdS,EAAIC,CAAG,EAAIC,CACd,OACMH,EAAG,CACN,GAAItB,EAAU,MAAM,IAAMQ,EACtB,OAAOe,EAEP,MAAMD,CACb,CACDP,IACIV,EAAWK,CAAK,IAAM,KACtBA,GACP,CACJ,MACS,CACN,GAAIV,EAAU,MAAM,IAAMQ,EACtB,OAAOe,EAEPZ,EAAgB,+BAA+B,CACtD,CACD,OAAAD,IACOa,CACf,EACUL,EAAW,IAAM,CACnBR,IACA,MAAMgB,EAAM,CAAA,EACZ,GAAI,CACA,KAAOrB,EAAWK,CAAK,IAAM,KACzBgB,EAAI,KAAKZ,EAAQ,CAAE,EACnBC,IACIV,EAAWK,CAAK,IAAM,KACtBA,GAGX,MACS,CACN,GAAIV,EAAU,MAAM,IAAMQ,EACtB,OAAOkB,EAEXf,EAAgB,8BAA8B,CACjD,CACD,OAAAD,IACOgB,CACf,EACUP,EAAW,IAAM,CACnB,GAAIT,IAAU,EAAG,CACTL,IAAe,KACfQ,EAAoB,sBAAsB,EAC9C,GAAI,CACA,OAAO,KAAK,MAAMR,CAAU,CAC/B,OACMiB,EAAG,CACN,GAAItB,EAAU,MAAM,IAAMQ,EACtB,GAAI,CACA,OAAO,KAAK,MAAMH,EAAW,UAAU,EAAGA,EAAW,YAAY,GAAG,CAAC,CAAC,CACzE,MACS,CAAG,CACjBQ,EAAoB,OAAOS,CAAC,CAAC,CAChC,CACJ,CACD,MAAMF,EAAQV,EAGd,IAFIL,EAAWK,CAAK,IAAM,KACtBA,IACGL,EAAWK,CAAK,GAAK,MAAM,QAAQL,EAAWK,CAAK,CAAC,IAAM,IAC7DA,IACAA,GAASD,GAAU,EAAET,EAAU,MAAM,IAAMQ,IAC3CG,EAAgB,6BAA6B,EACjD,GAAI,CACA,OAAO,KAAK,MAAMN,EAAW,UAAUe,EAAOV,CAAK,CAAC,CACvD,MACS,CACFL,EAAW,UAAUe,EAAOV,CAAK,IAAM,KACvCC,EAAgB,sBAAsB,EAC1C,GAAI,CACA,OAAO,KAAK,MAAMN,EAAW,UAAUe,EAAOf,EAAW,YAAY,GAAG,CAAC,CAAC,CAC7E,OACMiB,EAAG,CACNT,EAAoB,OAAOS,CAAC,CAAC,CAChC,CACJ,CACT,EACUP,EAAY,IAAM,CACpB,KAAOL,EAAQD,GAAU;AAAA,KAAU,SAASJ,EAAWK,CAAK,CAAC,GACzDA,GAEZ,EACI,OAAOI,EAAQ,CACnB,EACMa,EAAQvB,EACdd,EAAA,MAAgBqC,OCtNA,SAAAC,EAAeC,EAAiBC,EAA+B,uBACzE,GAAA,CACF,GAAKD,EAAU,CACP,MAAAE,EAAgBJ,QAAOE,CAAQ,EAChC,GAAA,CAAEE,EAAc,QAAU,CAC7B,QAAQ,KAAM,wBAAyB,EACvC,MACF,CAEA,MAAMP,EADcO,EAAc,QAAQ,OAChB,EACpBC,EAAQD,EAAc,QAASP,CAAI,GAAK,CAAA,EAOzC,GALLQ,EAAM,SAASC,EAAAH,EAAiBN,CAAI,IAArB,YAAAS,EAAwB,SAAU,UACjDD,EAAM,WAAWE,EAAAJ,EAAiBN,CAAI,IAArB,YAAAU,EAAwB,WAAY,GACrDF,EAAM,QAAQG,EAAAL,EAAiBN,CAAI,IAArB,YAAAW,EAAwB,QAAS,OAG1C,CAAEH,EAAM,MAAQ,CAAE,GAAG,OAAO,aAAcA,EAAM,IAAK,EAAI,CACpD,QAAA,KAAM,6CAA8CA,EAAM,IAAK,EACvE,MACF,CACc,OAAAD,EAAA,QAASP,CAAI,EAAE,MAAQ,GAG9BQ,EAAM,UAMXI,EAAAJ,EAAM,aAAN,MAAAI,EAAkB,WAClBC,EAAAL,EAAM,aAAN,YAAAK,EAAkB,aAAYC,GAAAC,EAAAT,EAAiBN,CAAI,IAArB,YAAAe,EAAwB,aAAxB,YAAAD,EAAoC,UAEpDP,EAAA,QAASP,CAAI,EAAE,OAAS,mBAC/BQ,EAAM,SAKSQ,EAAAR,CAAM,EAAE,KAAkBS,GAAA,CACvCA,IACWV,EAAA,QAASP,CAAI,EAAE,SAAWiB,EAC1C,CACA,EARWC,EAAAV,CAAM,EAAE,KAAkBS,GAAA,CACvBV,EAAA,QAASP,CAAI,EAAE,SAAWiB,CAAA,CACxC,GASJT,EAAM,eACNW,EAAAX,EAAM,cAAN,YAAAW,EAAmB,QAAS,GAC5B,KAAK,UAAWX,EAAM,WAAY,IAChC,KAAK,WAAWY,EAAAd,EAAiBN,CAAI,IAArB,YAAAoB,EAAwB,WAAY,IAExCb,EAAA,QAASP,CAAI,EAAE,OAAS,wBAC/BQ,EAAM,SAKaa,EAAAb,CAAM,EAAE,KAAkBS,GAAA,CAC3CA,IACWV,EAAA,QAASP,CAAI,EAAE,SAAWiB,EAC1C,CACA,EARWC,EAAAV,CAAM,EAAE,KAAkBS,GAAA,CACvBV,EAAA,QAASP,CAAI,EAAE,SAAWiB,CAAA,CACxC,GA9BSC,EAAAV,CAAM,EAAE,KAAkBS,GAAA,CACvBV,EAAA,QAASP,CAAI,EAAE,SAAWiB,EAC1BV,EAAA,QAASP,CAAI,EAAE,OAAS,OAAA,CACtC,EAoCGO,CACT,QACQe,EAAQ,CACR,QAAA,KAAM,0BAA2BA,CAAM,CACjD,CACF,CAEA,eAAsBC,GAAwB,CACxC,GAAA,CACF,MAAMC,EAAS,GAAG,KAAK,OAAQ,mBAAoB,EAAE,YAChDA,GAAUA,EAAO,OAAS,GACvB,MAAA,GAAG,KACN,SAAU,mBAAoB,EAC9B,aAAcA,EAAO,IAAKhB,GAASA,EAAM,QAAS,CAAE,QAEjDc,EAAQ,CACR,QAAA,KAAM,yBAA0BA,CAAM,CAChD,CACF,CAEA,eAAeJ,EAAaV,EAAmB,CAC7C,GAAKA,EAAM,SACT,OAGI,KAAA,CAAE,SAAAiB,CAAS,EAAI,GAAG,KAClB,CAAE,KAAAC,EAAM,WAAAC,CAAe,EAAAnB,EAGvBoB,EAAW,GAAG,OAAO,YAAaF,EAAMC,CAAW,EAGzD,aAAMF,EAAU,mBAAoB,EAAE,aAAcG,CAAS,EAEtDA,EAAS,QAClB,CAEA,eAAeZ,EAAoBR,EAAmB,CAC/C,GAAA,CAAEA,EAAM,SACX,OAEI,KAAA,CAAE,SAAAiB,CAAS,EAAI,GAAG,KACxB,aAAMA,EAAU,mBAAoB,EAAE,sBAAuBjB,EAAM,SAAUA,EAAM,UAAW,EACvFA,EAAM,QACf,CAEA,eAAea,EAAwBb,EAAmB,CACnD,GAAA,CAAEA,EAAM,SACJ,MAAA,GAEH,KAAA,CAAE,SAAAiB,CAAS,EAAI,GAAG,KACpB,GAAA,CAEF,MAAMI,EAAiB,GAAG,OAAO,oCAAqCrB,EAAM,WAAY,EACxF,GAAKqB,EAAiB,CAEd,MAAAD,EAAW,GAAG,OAAO,YAAapB,EAAM,KAAMA,EAAM,YAAc,CAAC,EAAGqB,CAAe,EAE3F,aAAMJ,EAAU,mBAAoB,EAAE,cAAejB,EAAM,SAAUoB,CAAS,EAEvEA,EAAS,QAClB,QACQN,EAAa,CACb,QAAA,MAAO,yCAA0CA,EAAM,OAAQ,CACzE,CACF","x_google_ignoreList":[0,1]}